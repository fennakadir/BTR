RNAseq analysis with R and DESeq2

Importing and preprocessing data 

#excel format
see excel file 

Note
- Make sure there's no spaces in the headers etc (for example Leaf I should be Leaf_I)
- Instead of transcript names there should be protein names 

From here on copy paste into Rstudio:
#to make sure you're working in the right folder, set your directory with the following command:
setwd('insert path to txt file')

#you can also check your directory with the following command:
getwd()

#install packages. 
install.packages("pheatmap")
install.packages("reshape2")
install.packages("gplots")
install.packages("RColorBrewer")
install.packages("ggplot2")
install.packages("dendextend")

#start DESeq2
library(DESeq2)

#import data
countdata <- read.table("insert name of txt file", header=TRUE, row.names=1)

# Convert to matrix
countdata <- as.matrix(countdata)

# Assign condition (first three are LeafI, second three are LeafII, third three are LeafIII, fourth three are LeafIV and last three are LeafM)
(condition <- factor(c(rep("Leaf_I", 3), rep("Leaf_II", 3), rep("Leaf_III", 3), rep("Leaf_IV", 3), rep("Leaf_M", 3))))

# Analysis with DESeq2


(coldata <- data.frame(row.names=colnames(countdata), condition))

dds <- DESeqDataSetFromMatrix(countData=countdata, colData=coldata, design=~condition)

dds <- DESeq(dds, test="LRT", reduced = ~ 1)

# rlog transformation
rld = rlogTransformation(dds)

# building the results table with p < 0.05
res <- results(dds, alpha=.05)
mcols(res, use.names=TRUE)
summary(res)

# MA plot 
plotMA(res, ylim=c(-7,7))
# Red points have adjusted p value < 0.05.

# We also see that there is a lot of noise associated with log2 fold changes from low count genes. DESeq2 can produce shrunken log2 fold changes to reduce the noice.
resShrink = lfcShrink(dds, coef=2)
plotMA(resShrink, ylim=c(-5,5))

#Save the most highly significant differentially expressed transcripts and view them (ordered by adjusted p-value and print top 100).
x <- head(res[order(res$padj),], 1000)
View(x)

#save the differentially expressed genes as a txt file 
write.table(x, file="name.txt", "path", sep="\t")

# Heatmap 
library("pheatmap")
mat = assay(rld)[ head(order(res$padj),30), ] # select the top 30 genes with the lowest padj
mat = mat - rowMeans(mat) # Subtract the row means from each value
# Optional, but to make the plot nicer:
df = as.data.frame(colData(rld)[,c("condition")]) # Create a dataframe with a column of the conditions
colnames(df) = "condition" # Rename the column header
rownames(df) = colnames(mat) # add rownames
# and plot the actual heatmap
pheatmap(mat, annotation_col=df)

OPTIONAL: Filtering the results 

1. Extract only the significant genes (padj < 0.1) from res
resSig <- subset(res, padj < 0.1)
resSig

2. Show the 10 most strongest up-regulated based on fold change. And plot the top gene.
head(resShrink[ order(resShrink$log2FoldChange), ], 10)
plotCounts(dds, "insert strongest up-regulated transcript", "condition")

3. And the 10 most down-regulated 
head(resShrink[ order(resShrink$log2FoldChange, decreasing=TRUE), ], 10)
plotCounts(dds, " ", "condition")

4.  Access the values of a specific transcript
assay(rld)["protein_name",]

5. If there were a few thousand DE genes. This is perhaps too much? And from the MA-plot we see that when genes are highly expressed they are called DE even when the fold change is really small. It is possible to filter the results based on fold change. In this case, genes with a fold change of 2 (or -2) 
resLFC1 = results(dds, lfcThreshold = 1)
summary(resLFC1)

plotMA(resLFC1, ylim=c(-7,7)) +
abline(h = 1, col = "blue") +
abline(h = -1, col = "blue")

resLFC1Srhunk = lfcShrink(dds, coef=2, res=resLFC1)
plotMA(resLFC1Srhunk, ylim=c(-5,5))+
abline(h = 1, col = "blue") +
abline(h = -1, col = "blue")

6. We can also change the p.adjusted cutoff to more strict than the default (0.1) by changing the alpha (equivalent to FDR)
res.05 <- results(dds, alpha=.05)
table(res.05$padj < .05)
summary(res.05)

res.05Shrunk = lfcShrink(dds, coef = 2, res=res.05)
plotMA(res.05Shrunk, alpha = 0.05, ylim=c(-5,5)) +
abline(h = 1, col = "blue") +
abline(h = -1, col = "blue")

7. Hierarchical clustering diagram 
library(dendextend)
my_hclust_gene <- hclust(dist(countdata), method = "complete")
as.dendrogram(my_hclust_gene) %>%
  plot(horiz = TRUE)

